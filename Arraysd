reverseArray

Time Complexity : O(n)

Iterative Way:
def reverseAraay(arr):
    l=0
    r= len(arr)-1
    while l < r:
        arr[l],arr[r] = arr[r],arr[l]
        l,r = l+1,r-1
    return arr
arr = [1, 2, 3, 4, 5, 6]
print(reverseAraay(arr))

Recursive Way :

def reverseList(A, start, end):
    if start >= end:
        return
    A[start], A[end] = A[end], A[start]
    reverseList(A, start+1, end-1)
 
# Driver function to test above function
A = [1, 2, 3, 4, 5, 6]
print(A)
reverseList(A, 0, 5)
print("Reversed list is")
print(A)

###################################################################################################
Maximum Subarray

Time Complexity : O(n)

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum = nums[0]
        curSum = 0
        
        for i in nums:
            if curSum < 0:
                curSum = 0
            curSum += i
            maxSum = max(maxSum , curSum)
        return maxSum
            
###################################################################################################
containsDuplicate

Time Complexity : O(n)


class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        cset= set()
        for i in nums:
            if i in cset:
                return True
            cset.add(i)
        return False
        
###################################################################################################
chocolateDistribution

Time Complexity : O(nlogn)


def chocolateDistribution(arr,n):
    arr.sort()
    minimumDiff = arr[len(arr)-1] - arr[0]
    for i in range(len(arr)-n+1):
        minimumDiff = min(arr[i+n-1] - arr[i],minimumDiff)
    return minimumDiff
    
arr = [12, 4, 7, 9, 2, 23, 25, 41,30, 40, 28, 42, 30, 44, 48,43, 50]
n = 7
print(chocolateDistribution(arr ,n))

###################################################################################################
